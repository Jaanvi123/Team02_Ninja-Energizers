{
	"info": {
		"_postman_id": "46697803-9d26a13a-558a-40cc-9b08-7e7c506b7bfc",
		"name": "Team2_Ninja-Energizers-Dietician API-AutomationLatest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "userLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5976740c-097f-458d-bf6f-db6618c57fd8",
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"Admin_Token\", jsonData.token);\r",
									"\r",
									"const jsonSchema={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\",\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Verify JSON Schema\",function() {\r",
									"    if(pm.response.code === 200) {\r",
									"        pm.response.to.have.jsonSchema(jsonSchema);\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "06cdcb43-5f2f-4de6-ba17-708d309e94d2",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46697803-3a0c2b63-1c19-47e3-985c-ff7601b0a074",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmail\": \"{{user_LoginEmail}}\",\r\n  \"password\": \"{{user_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "46697803-8f87d1c4-2b44-493a-9665-c1912defbf08"
		},
		{
			"name": "GET  Patients Morbidity Details",
			"item": [
				{
					"name": "createdietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "794e946c-2f05-43f2-b85e-42249b2014e2",
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"Dietician_Token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46697803-dc736a9b-9db3-4071-aa57-fdd538f6adff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmail\": \"{{user_LoginEmail}}\",\r\n  \"password\": \"{{user_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createpatient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b04c97f-8959-4213-a3e3-19cac936f170",
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"Patient_token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46697803-285a64c9-14d4-41be-ae14-7803a6145d3c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmail\": \"{{user_LoginEmail}}\",\r\n  \"password\": \"{{user_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Patients Morbidity Details",
					"id": "46697803-caa81d93-b34d-4df4-8769-e63b38125084",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Dietician_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get morbidity by patient token",
					"id": "46697803-b7599f78-3f87-4569-aec0-376be648f6c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Patient_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "46697803-f77e3ae0-7d13-455e-a5d9-8dcdb3c0d603"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4c0aaf22-45a3-4708-a577-bbc2ef1847d7",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if (typeof pm.variables.get('requestdata') !== 'object') {\r",
					"    pm.variables.set('requestdata', pm.iterationData.toObject());\r",
					"}\r",
					"const requestdata = pm.variables.get('requestdata');\r",
					"\r",
					"if(typeof requestdata !== 'object' || Object.keys(requestdata).length ===0) {\r",
					"    console.log(\"No external file found\")\r",
					"    return;\r",
					"}\r",
					"\r",
					"const currentrequest = requestdata.requests.filter(({name}) => name === pm.info.requestName) [0];\r",
					"if(!currentrequest){\r",
					"    console.log(`Request ${pm.info.requestName} has no data defined.`);\r",
					"}\r",
					"\r",
					"const variables = currentrequest.data.shift();\r",
					"\r",
					"Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"    });\r",
					"\r",
					" pm.variables.set('requestdata',requestdata);\r",
					"if(currentrequest.data.length > 0){\r",
					"    pm.execution.setNextRequest(pm.info.requestName)\r",
					"}\r",
					" \r",
					" "
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3b5bb912-996a-400b-a83c-2f89dc4a7e40",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					"pm.test(\"Status code is expected\", function () {\r",
					"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
					"});\r",
					"\r",
					"pm.test(\"Status line is correct\", function () {\r",
					"  pm.expect(pm.response.status).to.eql(pm.variables.get(\"expectedStatusLine\")); \r",
					"});\r",
					"\r",
					"pm.test(\"Content-Type is correct\", function () {\r",
					"    pm.response.to.have.header(\"Content-Type\", pm.variables.get(\"expectedContentType\"));\r",
					"});\r",
					"pm.test(\"Response time is less than 1000ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"});\r",
					"\r",
					"pm.test (\"Content-Type header is present\", () => { \r",
					"    pm.response.to.have.header (\"Content-Type\") ;\r",
					"});\r",
					"\r",
					"\r",
					""
				]
			}
		}
	]
}