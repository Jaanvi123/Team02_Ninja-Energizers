{
	"info": {
		"_postman_id": "46697710-2e00db73-dbec-4d3a-a747-1f63dd7fb933",
		"name": "Team2_Ninja-Energizers-Dietician API-AutomationLatest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "SuccessfulMessages",
					"item": [
						{
							"name": "userLogin-POST-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5976740c-097f-458d-bf6f-db6618c57fd8",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "06cdcb43-5f2f-4de6-ba17-708d309e94d2",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "46697710-62254cae-1aba-4255-9280-c312d6fda44c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"{{user_LoginEmail}}\",\r\n  \"password\": \"{{user_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{endpoint}}",
									"host": [
										"{{baseUrl}}{{endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "46697710-d6a12675-d250-4124-a79b-51527cac280f"
				}
			],
			"id": "46697710-fb8f4bdf-1602-481b-a73e-0563372fecdf"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bf5df9f0-04f3-404c-b09c-b739ed2af354",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					"const fullRequestName = pm.info.requestName;\r",
					"const normalizedRequestName = fullRequestName.split('-')[0];\r",
					"const jsonData = pm.iterationData.toObject();\r",
					"const group = jsonData.requests?.find(r => r.name === normalizedRequestName);\r",
					"\r",
					"if (!group) {\r",
					"    console.error(`No matching request group found for request name: ${normalizedRequestName}`);\r",
					"    return;\r",
					"}\r",
					"\r",
					"const index = pm.info.iteration;\r",
					"const testCase = group.data?.[index];\r",
					"\r",
					"if (!testCase) {\r",
					"    console.warn(`No test case data found for iteration ${index} in request group ${normalizedRequestName}`);\r",
					"    return;\r",
					"}\r",
					"\r",
					"// // Optionally, selectively set env vars needed by your request\r",
					"// const keysToSet = ['endpoint', 'user_LoginEmail', 'user_password'];\r",
					"// keysToSet.forEach(key => {\r",
					"//   if (testCase[key] !== undefined) {\r",
					"//     pm.environment.set(key, testCase[key]);\r",
					"//   }\r",
					"// });\r",
					"\r",
					"console.log(`Running TestCase: ${testCase.testCaseId} - ${testCase.scenarioName}`);\r",
					"\r",
					"\r",
					"// const fullRequestName = pm.info.requestName;\r",
					"// const normalizedRequestName = fullRequestName.split('-')[0];\r",
					"// const jsonData = pm.iterationData.toObject();\r",
					"// const group = jsonData.requests?.find(r => r.name === normalizedRequestName);\r",
					"\r",
					"// if (!group) {\r",
					"//     console.error(`No matching request group found for request name: ${normalizedRequestName}`);\r",
					"//     return;\r",
					"// }\r",
					"\r",
					"// const index = pm.info.iteration;\r",
					"// const testCase = group.data?.[index];\r",
					"\r",
					"// if (!testCase) {\r",
					"//     console.warn(`No test case data found for iteration ${index} in request group ${normalizedRequestName}`);\r",
					"//     return;\r",
					"// }\r",
					"\r",
					"// // Clear old env vars before setting new ones\r",
					"// pm.environment.clear();\r",
					"\r",
					"// Object.entries(testCase).forEach(([key, value]) => {\r",
					"//     pm.environment.set(key, value);\r",
					"// });\r",
					"\r",
					"// console.log(`Running TestCase: ${testCase.testCaseId} - ${testCase.scenarioName}`);\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"// // Get full request name in Postman tab\r",
					"// const fullRequestName = pm.info.requestName;\r",
					"\r",
					"// // Normalize request name by taking first part before any '-'\r",
					"// const normalizedRequestName = fullRequestName.split('-')[0];\r",
					"\r",
					"// // Load JSON data from current iteration\r",
					"// const jsonData = pm.iterationData.toObject();\r",
					"\r",
					"// // Find matching request group by normalized name\r",
					"// const group = jsonData.requests?.find(r => r.name === normalizedRequestName);\r",
					"\r",
					"// if (!group) {\r",
					"//     console.error(`No matching request group found for request name: ${normalizedRequestName}`);\r",
					"//     return;  // Stop execution to avoid errors\r",
					"// }\r",
					"\r",
					"// // Get current iteration index\r",
					"// const index = pm.info.iteration;\r",
					"\r",
					"// // Get test case data for current iteration\r",
					"// const testCase = group.data?.[index];\r",
					"\r",
					"// if (!testCase) {\r",
					"//     console.warn(`No test case data found for iteration ${index} in request group ${normalizedRequestName}`);\r",
					"//     return;\r",
					"// }\r",
					"\r",
					"// // Set variables for the request (endpoint, user_LoginEmail, user_password, etc.)\r",
					"// Object.entries(testCase).forEach(([key, value]) => {\r",
					"//     pm.environment.set(key, value);\r",
					"// });\r",
					"\r",
					"// // Optional: log the test case info\r",
					"// console.log(`Running TestCase: ${testCase.testCaseId} - ${testCase.scenarioName}`);\r",
					"\r",
					" \r",
					"\r",
					"\r",
					"// //Read Current row of the json data file\r",
					"// const requestName = pm.info.requestName;\r",
					"\r",
					"// //Read jsondata from iteration \r",
					"// const jsonData = pm.iterationData.toObject();\r",
					"\r",
					"// // Optional: Only run this for specific request\r",
					"// if (requestName !== \"userLogin\") return;\r",
					"\r",
					"// // Find matching request group by name\r",
					"// const group = jsonData.requests?.find(r => r.name === requestName);\r",
					"\r",
					"// if (!group || !Array.isArray(group.data) || group.data.length === 0) {\r",
					"//     console.error(`No data found for request: ${requestName}`);\r",
					"//     return;\r",
					"// }\r",
					"\r",
					"// // Track current test case index\r",
					"// const index = pm.info.iteration;\r",
					"\r",
					"// // Get the corresponding test case data\r",
					"// const testCase = group.data[index];\r",
					"// if (!testCase) {\r",
					"//     console.warn(`No testCase found for iteration ${index}`);\r",
					"//     return;\r",
					"// }\r",
					"\r",
					"// // Set variables for use in the request body, headers, etc.\r",
					"// Object.entries(testCase).forEach(([key, value]) => {\r",
					"//     pm.variables.set(key, value);\r",
					"// });\r",
					"\r",
					"// // Optional Logging\r",
					"// console.log(`Running TestCase: ${testCase.testCaseId} - ${testCase.scenarioName}`);\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6ad8c53a-f905-44ea-813d-5276d213971d",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let jsonResponse;\r",
					"try {\r",
					"    jsonResponse = pm.response.json();\r",
					"    pm.test(\"Response is a valid JSON Object\", () => {\r",
					"        pm.expect(jsonResponse).to.be.an(\"object\");\r",
					"    });\r",
					"} catch (e) {\r",
					"    pm.test(\"Response is a valid JSON Object\", () => {\r",
					"        throw new Error(\"Response is not a valid JSON Object\");\r",
					"    });\r",
					"    return;\r",
					"}\r",
					"\r",
					"//Positive Flow for Response Code 200 OK \r",
					"\r",
					"const statusCode = pm.response.code;\r",
					"const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
					"const expectedErrorMessage = pm.variables.get(\"expectedErrorMessage\");\r",
					"\r",
					"if (statusCode === expectedStatusCode) {\r",
					"    if (expectedStatusCode === 200) {\r",
					"\r",
					"        //Response Data validations\r",
					"        pm.test(\"Valid Token Returned\", () => {\r",
					"            pm.expect(jsonResponse.token).to.be.a(\"string\").and.not.empty;\r",
					"        });\r",
					"        //Token type as Bearer validations\r",
					"        pm.test(\"Token type is 'Bearer'\", () => {\r",
					"            pm.expect(jsonResponse.type.trim()).to.eql(\"Bearer\");\r",
					"        });\r",
					"        //store the token as an environment variable\r",
					"        if (jsonResponse.token) {\r",
					"            pm.environment.set(\"token\", jsonResponse.token);\r",
					"            console.log(\"Token Saved as environment variable:\", jsonResponse.token);\r",
					"        } else {\r",
					"            console.warn(\"Token not received in the response\");\r",
					"        }\r",
					"        //Validate userId field is numeric\r",
					"        pm.test(\"userId is a number\", () => {\r",
					"            pm.expect(jsonResponse.userId).to.be.a(\"number\");\r",
					"        });\r",
					"        //Validate email id is matched with request email id\r",
					"        pm.test(\"userLoginEmail match with request email id\", () => {\r",
					"            const expectedEmailId = pm.variables.get(\"user_LoginEmail\");\r",
					"            pm.expect(jsonResponse.loginUserEmail).to.eql(expectedEmailId);\r",
					"        });\r",
					"        //Validate roles contain ROLE_ADMIN\r",
					"        pm.test(\"Role display as ROLE_ADMIN\", () => {\r",
					"            pm.expect(jsonResponse.roles).to.include(\"ROLE_ADMIN\");\r",
					"        });\r",
					"\r",
					"        //JSON Schema Validations\r",
					"        const schema = {\r",
					"            \"type\": \"object\",\r",
					"            \"properties\": {\r",
					"                \"token\": {\r",
					"                    \"type\": \"string\",\r",
					"                    \"minLength\": 1\r",
					"                },\r",
					"                \"type\": {\r",
					"                    \"type\": \"string\",\r",
					"                    \"minLength\": 1\r",
					"                },\r",
					"                \"userId\": {\r",
					"                    \"type\": \"number\"\r",
					"                },\r",
					"                \"loginUserEmail\": {\r",
					"                    \"type\": \"string\",\r",
					"                    \"minLength\": 1\r",
					"                },\r",
					"                \"roles\": {\r",
					"                    \"type\": \"array\",\r",
					"                    \"items\": {\r",
					"                        \"required\": [],\r",
					"                        \"properties\": {}\r",
					"                    }\r",
					"                }\r",
					"            },\r",
					"            \"required\": [\r",
					"                \"token\",\r",
					"                \"type\",\r",
					"                \"userId\",\r",
					"                \"loginUserEmail\",\r",
					"                \"roles\"\r",
					"            ]\r",
					"        }\r",
					"\r",
					"        pm.test(\"Validate JSON schema\", () => {\r",
					"            pm.response.to.have.jsonSchema(schema);\r",
					"        });\r",
					"\r",
					"    } \r",
					"\r",
					"    //Negative Flows - Error Codes\r",
					"    else if (expectedStatusCode === 401) {\r",
					"        pm.test(\"Unauthorized error display\", () => {\r",
					"            pm.expect(jsonResponse.message || jsonResponse.error).to.include(\"Unauthorized\");\r",
					"        });\r",
					"        if (expectedErrorMessage) {\r",
					"            pm.test(\"Error message matches expected\", () => {\r",
					"                pm.expect((jsonResponse.message || jsonResponse.error).toLowerCase()).to.include(expectedErrorMessage.toLowerCase());\r",
					"            });\r",
					"        }\r",
					"    } else if (expectedStatusCode === 400) {\r",
					"        pm.test(\"Bad Request error message is returned\", () => {\r",
					"            pm.expect(jsonResponse.message || jsonResponse.error).to.exist;\r",
					"        });\r",
					"        if (expectedErrorMessage) {\r",
					"            pm.test(\"Error message matches expected\", () => {\r",
					"                pm.expect((jsonResponse.message || jsonResponse.error).toLowerCase()).to.include(expectedErrorMessage.toLowerCase());\r",
					"            });\r",
					"        }\r",
					"    } else if (expectedStatusCode === 404) {\r",
					"        pm.test(\"Not Found error is returned\", () => {\r",
					"            pm.expect(jsonResponse.message || jsonResponse.error).to.include(\"Not Found\");\r",
					"        });\r",
					"        if (expectedErrorMessage) {\r",
					"            pm.test(\"Error message matches expected\", () => {\r",
					"                pm.expect((jsonResponse.message || jsonResponse.error).toLowerCase()).to.include(expectedErrorMessage.toLowerCase());\r",
					"            });\r",
					"        }\r",
					"    }\r",
					"} else {\r",
					"    pm.test(\"Status code is as expected\", () => {\r",
					"        pm.expect(statusCode).to.eql(expectedStatusCode);\r",
					"    });\r",
					"}\r",
					"\r",
					"// Generic validations for all responses\r",
					"pm.test(\"Actual and Expected Status code match\", () => {\r",
					"    pm.response.to.have.status(expectedStatusCode);\r",
					"});\r",
					"\r",
					"pm.test(\"Actual and Expected Status line match\", () => {\r",
					"    pm.expect(pm.response.status).to.eql(pm.variables.get(\"expectedStatusLine\"));\r",
					"});\r",
					"\r",
					"pm.test(\"Actual and Expected Content-Type match\", () => {\r",
					"    pm.response.to.have.header(\"Content-Type\", pm.variables.get(\"expectedContentType\"));\r",
					"});\r",
					""
				]
			}
		}
	]
}