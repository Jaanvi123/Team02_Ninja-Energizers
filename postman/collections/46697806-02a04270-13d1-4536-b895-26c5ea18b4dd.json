{
	"info": {
		"_postman_id": "46697806-02a04270-13d1-4536-b895-26c5ea18b4dd",
		"name": "Team2_Ninja-Energizers-Dietician API-AutomationLatest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "userLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5976740c-097f-458d-bf6f-db6618c57fd8",
								"exec": [
									"var JsonData = pm.response.json();\r",
									"var AdminBearer_Token = JsonData.token;\r",
									"pm.environment.set(\"AdminBearer_Token\", AdminBearer_Token );\r",
									"\r",
									"pm.test(\"Validating Status Code\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"const jsonSchema={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\",\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Verify JSON Schema\",function() {\r",
									"    if(pm.response.code === 200) {\r",
									"        pm.response.to.have.jsonSchema(jsonSchema);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Schema Data\", function () {\r",
									"    if(pm.response.code === 200) {\r",
									"       var jsonData = pm.response.json();\r",
									"       var roles = jsonData.roles;\r",
									"       pm.expect(roles.includes(\"ROLE_ADMIN\")).to.be.true;\r",
									"       pm.expect(jsonData.type).to.eql(\"Bearer \");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "06cdcb43-5f2f-4de6-ba17-708d309e94d2",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46697806-29da9107-b0e5-48e8-a590-3d195b7182e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmail\": \"{{user_LoginEmail}}\",\r\n  \"password\": \"{{user_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "46697806-efec67ac-7025-428b-9a80-239efe60c050"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ef4bc1df-3773-4075-a956-fffe5be14409",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Fetch current row of test data\r",
					"const requestName = pm.info.requestName;\r",
					"const allData = pm.iterationData.toObject();\r",
					"\r",
					"// Optional: Only run this for specific request\r",
					"if (requestName !== \"userLogin\") return;\r",
					"\r",
					"// Find matching request group by name\r",
					"const group = allData.requests?.find(r => r.name === requestName);\r",
					"\r",
					"if (!group || !Array.isArray(group.data) || group.data.length === 0) {\r",
					"    console.error(`No data found for request: ${requestName}`);\r",
					"    return;\r",
					"}\r",
					"\r",
					"// Track current test case index\r",
					"const index = pm.info.iteration;\r",
					"\r",
					"// Get the corresponding test case data\r",
					"const testCase = group.data[index];\r",
					"if (!testCase) {\r",
					"    console.warn(`No testCase found for iteration ${index}`);\r",
					"    return;\r",
					"}\r",
					"\r",
					"// Set variables for use in the request body, headers, etc.\r",
					"Object.entries(testCase).forEach(([key, value]) => {\r",
					"    pm.variables.set(key, value);\r",
					"});\r",
					"\r",
					"// Optional Logging\r",
					"console.log(`ðŸ§ª Running TestCase: ${testCase.testCaseId} - ${testCase.scenarioName}`);\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b644762e-920a-4407-95df-4e3923894501",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					"pm.test(\"Status code is expected\", function () {\r",
					"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
					"});\r",
					"\r",
					"pm.test(\"Status line is correct\", function () {\r",
					"  pm.expect(pm.response.status).to.eql(pm.variables.get(\"expectedStatusLine\")); \r",
					"});\r",
					"\r",
					"pm.test(\"Content-Type is correct\", function () {\r",
					"    pm.response.to.have.header(\"Content-Type\", pm.variables.get(\"expectedContentType\"));\r",
					"});\r",
					"pm.test(\"Response time is less than 1000ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"});\r",
					"\r",
					"\r",
					""
				]
			}
		}
	]
}